{"ast":null,"code":"import { Operation } from './Operation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/Opertion/operation.service\";\nimport * as i3 from \"../service/token-storage.service\";\nimport * as i4 from \"../service/Doctor/doctor.service\";\nimport * as i5 from \"../service/Patient/patient.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"../index/index.component\";\nfunction OperationComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Operation Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction OperationComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, OperationComponent_div_14_div_1_Template, 2, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(13);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.errors.required);\n  }\n}\nfunction OperationComponent_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doc_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", doc_r6.doctorId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", doc_r6.doctorId, \" \", doc_r6.doctorName, \" \");\n  }\n}\nfunction OperationComponent_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const pat_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", pat_r7.pid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", pat_r7.pid, \" \", pat_r7.pName, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport let OperationComponent = /*#__PURE__*/(() => {\n  var _class;\n  class OperationComponent {\n    constructor(router, os, route, tss, ds, ps, renderer) {\n      this.router = router;\n      this.os = os;\n      this.route = route;\n      this.tss = tss;\n      this.ds = ds;\n      this.ps = ps;\n      this.renderer = renderer;\n      this.btn = 'save';\n      this.op = new Operation();\n    }\n    ngOnInit() {\n      this.renderer.setStyle(document.body, 'background-color', '#C3E6FC');\n      if (this.tss.getToken()) {\n        if (this.route.snapshot.params['id'] > 0) {\n          this.id = this.route.snapshot.params['id'];\n          this.btn = 'Update';\n          this.getOperation();\n        }\n        this.getDocs();\n        this.getPatient();\n      } else {\n        this.router.navigate(['login']);\n      }\n    }\n    getOperation() {\n      this.os.getOperationById(this.id).subscribe(data => {\n        this.op = data;\n      }, error => {\n        console.log(error);\n      });\n    }\n    onSubmit() {\n      if (this.id > 0) {\n        this.update();\n      } else {\n        this.save();\n      }\n    }\n    update() {\n      this.os.updateOperation(this.id, this.op).subscribe(response => {\n        console.log(response);\n        alert('Updated Successfully');\n        this.gotoNext();\n      }, error => {\n        alert('Not Updated');\n        console.log(error);\n      });\n    }\n    save() {\n      this.os.addOperation(this.op).subscribe(response => {\n        console.log(response);\n        alert('Patient assign to ' + response.oName);\n        this.gotoNext();\n      }, error => {\n        alert('Not added');\n        console.log(error);\n      });\n    }\n    gotoNext() {\n      if (this.id > 0) {\n        this.router.navigate(['operationList']);\n      } else {\n        this.router.navigate(['operationList']);\n      }\n    }\n    getDocs() {\n      this.ds.getAllDoctor().subscribe(list => {\n        this.docList = list;\n      });\n    }\n    getPatient() {\n      this.ps.getAllPatient().subscribe(list => {\n        this.patientList = list;\n      });\n    }\n  }\n  _class = OperationComponent;\n  _class.ɵfac = function OperationComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.OperationService), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i3.TokenStorageService), i0.ɵɵdirectiveInject(i4.DoctorService), i0.ɵɵdirectiveInject(i5.PatientService), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-operation\"]],\n    decls: 27,\n    vars: 10,\n    consts: [[1, \"contanier\", 2, \"margin-top\", \"8%\"], [1, \"text-center\"], [1, \"row\", \"justify-content-center\", \"align-items-center\"], [1, \"col-10\", \"col-md-8\", \"col-lg-6\"], [\"name\", \"opForm\", \"novalidate\", \"\", 3, \"ngSubmit\"], [\"o\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"oName\"], [\"type\", \"text\", \"name\", \"oName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"oName\", \"ngModel\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"doctor\"], [\"name\", \"doctor\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"patient\"], [\"name\", \"patient\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [3, \"value\"]],\n    template: function OperationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r8 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelement(0, \"app-index\");\n        i0.ɵɵelementStart(1, \"div\", 0)(2, \"div\", 1)(3, \"h1\");\n        i0.ɵɵtext(4, \"Operation Page\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 2)(6, \"div\", 3)(7, \"form\", 4, 5);\n        i0.ɵɵlistener(\"ngSubmit\", function OperationComponent_Template_form_ngSubmit_7_listener() {\n          i0.ɵɵrestoreView(_r8);\n          const _r0 = i0.ɵɵreference(8);\n          return i0.ɵɵresetView(_r0.form.valid && ctx.onSubmit());\n        });\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 8, 9);\n        i0.ɵɵlistener(\"ngModelChange\", function OperationComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.op.oName = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, OperationComponent_div_14_Template, 2, 1, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 6)(16, \"label\", 11);\n        i0.ɵɵtext(17, \"Doctor Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"select\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function OperationComponent_Template_select_ngModelChange_18_listener($event) {\n          return ctx.op.doctor.doctorId = $event;\n        });\n        i0.ɵɵtemplate(19, OperationComponent_option_19_Template, 2, 3, \"option\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 6)(21, \"label\", 14);\n        i0.ɵɵtext(22, \"Patient Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"select\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function OperationComponent_Template_select_ngModelChange_23_listener($event) {\n          return ctx.op.patient.pid = $event;\n        });\n        i0.ɵɵtemplate(24, OperationComponent_option_24_Template, 2, 3, \"option\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"button\", 16);\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(8);\n        const _r1 = i0.ɵɵreference(13);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngModel\", ctx.op.oName)(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, _r0.submitted && _r1.invalid));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", _r0.submitted && _r1.invalid);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.op.doctor.doctorId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.docList);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.op.patient.pid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.patientList);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.btn);\n      }\n    },\n    dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i7.ɵNgNoValidate, i7.NgSelectOption, i7.ɵNgSelectMultipleOption, i7.DefaultValueAccessor, i7.SelectControlValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.RequiredValidator, i7.NgModel, i7.NgForm, i8.IndexComponent]\n  });\n  return OperationComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}